#!/usr/bin/env perl
#
#ver http://stackoverflow.com/a/26547845
#
use strict;
use YAML qw(LoadFile DumpFile);
use Getopt::Std;
use Cwd;
use Data::Dumper;
use File::Spec;
use File::Basename;


my $CONFIG_FILE = '.de';

my @current_path = File::Spec->splitdir(

    File::Spec->rel2abs(

        File::Spec->curdir()
    )
);


my $DEFAULT_PROJECT_NAME = pop @current_path;
my $REAL_GROUP_ID = (split(' ', $())[0];

my $CONFIG = {
    project => $DEFAULT_PROJECT_NAME,
    container => undef,
    image => undef,
    
    project_volume => File::Spec->join(
        File::Spec->rootdir,
        'home',
        scalar(getpwuid($<)),
        $DEFAULT_PROJECT_NAME
    ),
    ports => [],
    action => 'exec',
    container_username => scalar(getpwuid($<)),
    container_group => scalar(getgrgid($REAL_GROUP_ID)),
    
    homedir => File::Spec->join(
    
        File::Spec->rootdir(),
        'home',
        scalar(getpwuid($<))
    ),
    
    user_id => $<,
    
    group_id => $REAL_GROUP_ID,

    env => {},
};
&read_config;
&load_command_line_args;

if($CONFIG->{action} eq 'start'){
    $CONFIG->{container} ||= $CONFIG->{project}.'_'.int(rand(100));
    &create_container;
    &save_config;
}
elsif($CONFIG->{action} eq 'exec'){

    my $sh_cmd = &build_comand(@ARGV);
    &execute_command($sh_cmd);
}
elsif($CONFIG->{action} =~  /^delete|drop|rm|remove$/i){
    &delete_container();
}



#########################################################################

sub current_path_relative_to_project_root {
    my $current_abs_path = File::Spec->rel2abs(File::Spec->curdir());

    my @current_abs_path = File::Spec->splitdir($current_abs_path);

    my $rel_path = File::Spec->curdir();

    my @slices = ();

    while(@current_abs_path > 0){

        if(-e File::Spec->join($rel_path, $CONFIG_FILE)){

            return File::Spec->join(@slices, File::Spec->curdir());
        }

        unshift @slices, pop(@current_abs_path);

        $rel_path = File::Spec->join(File::Spec->updir(), $rel_path);
    }

}

sub abs_root_path {

    my $current_abs_path = File::Spec->rel2abs(File::Spec->curdir());
    my @current_abs_path = File::Spec->splitdir($current_abs_path);
    my $rel_path = File::Spec->curdir();

    while(@current_abs_path > 0 ){
        if(-e File::Spec->join($rel_path, $CONFIG_FILE)){

            return File::Spec->join(@current_abs_path);
        }

        pop(@current_abs_path);

        $rel_path = File::Spec->join(File::Spec->updir(), $rel_path);

    }

}

sub build_comand {
    my @args = @_;

    die("Falta comando a ejecutar en container") unless(@args);

    my $cmd = join (' ', @args);

    my $current_path = File::Spec->join(
    
        $CONFIG->{project_volume}, 
    
        &current_path_relative_to_project_root()
    );


    if($CONFIG->{root}){
    
        "bash -c 'cd $current_path && $cmd'";

    }
    else{

        "su -c 'cd $current_path && ".&build_env."$cmd' $CONFIG->{container_username}";
    }
}

sub build_env {

    my $env = '';

    foreach my $env_var (@{$CONFIG->{env}}){
        $env .= "$env_var "
    }
    
    $env;
}

sub execute_command {
    my ($sh_cmd) = @_;

    die("container not specified") unless($CONFIG->{container});
    
    my $docker_command = "docker exec -ti $CONFIG->{container} $sh_cmd";
    
    #print "Executing $docker_command ...\n";

    system($docker_command);

}

sub create_container {
    die("image not specified") unless($CONFIG->{image});

    my @command  = qw(docker run);
    push @command, ('--name', $CONFIG->{container});
    push @command, ("-v", File::Spec->rel2abs(File::Spec->curdir()).':'.$CONFIG->{project_volume});
    push @command, '-d';

    foreach my $port (@{$CONFIG->{ports}}){ 
        push @command, ("-p", $port);
    }

    # arrancamos o container esperando indefinidamente
    #push @command, ($CONFIG->{image}, 'bash','-c', 'while true; do sleep 10000; done');
    push @command, ($CONFIG->{image}, 'tail','-f', '/dev/null');

    # creamos container
    print "Creating container $CONFIG->{container}...";
    system(@command);

    # creamos usuario e homedir dentro de container
    my $new_cmd = "docker exec $CONFIG->{container} /bin/bash -c '" . &create_user_cmd . "'";
    system($new_cmd);

}

sub delete_container{
    die("container not specified") unless ($CONFIG->{container});
    print "Removing container ...";
    system("docker rm -f -v $CONFIG->{container}");
}

sub create_user_cmd{
        "groupadd -f --gid $CONFIG->{group_id} $CONFIG->{container_group} && \ 
        useradd -u $CONFIG->{user_id} -g $CONFIG->{container_group} $CONFIG->{container_username} && \ 
        mkdir --parent $CONFIG->{homedir} && \ 
        chown -R $CONFIG->{container_username}:$CONFIG->{container_group} $CONFIG->{homedir}"
}


sub read_config {
 
    my $config_path = File::Spec->join(
        &abs_root_path,
        $CONFIG_FILE
    );

    return unless -e $config_path;

    my $data = LoadFile($config_path);

    while(my ($k, $v) = each(%$data)){
        if(exists($CONFIG->{$k})){
            $CONFIG->{$k} = $v
        }
    }
}

sub save_config {

    delete($CONFIG->{action});
    DumpFile($CONFIG_FILE, $CONFIG)
}


sub load_command_line_args{
    my $conf = $CONFIG;

    # Mergeamos CONF cas opcions pasadas desde a linea de comandos
    my $opts = {};
    getopts("i:c:p:v:a:R", $opts);

    $conf->{container} = $opts->{c} if($opts->{c});
    $conf->{image} = $opts->{i} if($opts->{i});
    $conf->{project_volume} = $opts->{v} if($opts->{v});
    $conf->{project} = $opts->{p} if($opts->{p});
    $conf->{action} = $opts->{a} if($opts->{a});
    $conf->{root} = 1 if($opts->{R});

}


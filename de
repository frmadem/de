#!/usr/bin/env perl
use YAML qw(LoadFile);
use Getopt::Std;
use Data::Dumper;
use strict;

my $CONFIG = {
    container => undef,
    image => undef,
    project_volume => '/home/my_project',
    ports => [],
    action => 'exec',
};

my $CONFIG_FILE = '.de';

&leer_config;
&cargar_parametros_linea_comandos;

#
# TODO
#
if($CONFIG->{action} eq 'exec'){
    my $sh_cmd = &build_comand(@ARGV);
    &execute_command($sh_cmd);
}
elsif($CONFIG->{action} eq 'create_container'){
    &create_container
}



#########################################################################
sub build_comand {
    my @args = @_;

    die("Falta comando a ejecutar en container") unless(@args);

    'cd '.$CONFIG->{project_volume}.' && '.join (' ', @args)
}

sub execute_command {
    my ($sh_cmd) = @_;

    die("Falta container") unless($CONFIG->{container});
    
    my $docker_command = "docker exec -t ".$CONFIG->{container}." bash -c '$sh_cmd'";
    
    print "Executing $docker_command ...\n";

    exec($docker_command);

}

sub create_container {
    die("Falta imagen") unless($CONFIG->{image});

    my @command  = qw(docker run);
    push @command, ("-v", ".:$CONFIG->{project_volume}");

    foreach my $port (@{$CONFIG->{ports}}){ 
        push @command, ("-p", $port);
    }
    push @command, ($CONFIG->{image}, "/bin/bash");

    exec(@command);
}


sub leer_config {
    #open my $f, $CONFIG || die ("Error abriendo $CONFIG");

    return unless -e $CONFIG_FILE;

    my $data = LoadFile($CONFIG_FILE);

    while(my ($k, $v) = each(%$data)){
        if(exists($CONFIG->{$k})){
            $CONFIG->{$k} = $v
        }
    }
}


sub cargar_parametros_linea_comandos{
    my $conf = $CONFIG;

    # Mergeamos CONF cas opcions pasadas desde a linea de comandos
    my $opts = {};
    getopts("i:c:p:a:", $opts);

    $conf->{container} = $opts->{c} if($opts->{c});
    $conf->{image} = $opts->{i} if($opts->{i});
    $conf->{project_volume} = $opts->{p} if($opts->{p});
    $conf->{action} = $opts->{a} if($opts->{a});

}

